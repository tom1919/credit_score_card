"0","# object to create one hot encoded variables"
"0","enconder <- onehot(train, max_levels = 15)"
"0","# create one hot encoded variables"
"0","train <- predict(enconder, train) %>% "
"0","  as.data.frame() %>%"
"0","  select(-`GB=0`)"
"0","test <- predict(enconder, test) %>% "
"0","  as.data.frame() %>%"
"0","  select(-`GB=0`)"
"0","rejects2 <- predict(enconder, rejects2) %>% "
"0","  as.data.frame() %>%"
"0","  select(-`GB=0`)"
"0","# change column names syntactically valid"
"0","names(train) <- make.names(names(train))"
"0","names(test) <- make.names(names(test))"
"0","names(rejects2) <- make.names(names(rejects2))"
"0","# rename target variable to be GB (good/bad)"
"0","names(train)[1] = ""GB"""
"0","names(test)[1] = ""GB"""
"0","names(rejects2)[1] = ""GB"""
"0","# make GB values to be B or G. (train function produces error if its 1 or 0)"
"0","train <- train %>% mutate(GB = ifelse(GB == 1, ""B"", ""G""))"
"0","test <- test %>% mutate(GB = ifelse(GB == 1, ""B"", ""G""))"
"0","rejects2 <- rejects2 %>% mutate(GB = ifelse(GB == 1, ""B"", ""G""))"
"0","# cast target variable as factor"
"0","train$GB <- as.factor(train$GB)"
"0","test$GB <- as.factor(test$GB)"
"0","rejects2$GB <- as.factor(rejects2$GB)"
