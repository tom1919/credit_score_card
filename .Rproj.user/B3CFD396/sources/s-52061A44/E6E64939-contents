---
title: "Data Prep"
output: html_notebook
---

The purpose of this notebook is to explore the data, impute missing values,
create features and split into training and test sets

Load custom functions, libraries and data
```{r}
# helper functions
source("./helper_functions.R")
# load / install packages
LoadPackages(c("dplyr", 'haven', 'missForest', "stringr", "tibble"))

# read in data
accepts <- read_sas("../data/orginal/accepted_customers.sas7bdat")
rejects <- read_sas("../data/orginal/rejected_customers.sas7bdat")

# replace empty spaces with NA
accepts[accepts==""] <- NA
rejects[rejects==""] <- NA
```

Summary of the accepts data set
```{r}
summarize_df(accepts)
```

Summary of the rejects data set
```{r}
summarize_df(rejects)
```

Subset rejects cols to only the ones in accepts df
Bind accepts df with rejects df
```{r}
not_in_accepts <- setdiff(names(rejects), names(accepts))
rejects <- rejects %>% select(setdiff( names(rejects), not_in_accepts))

all <- bind_rows(accepts, rejects)
```

Issues with the data
```{r}
# 123 NA values for time at address
all %>% filter(TMADD == 999) %>% nrow()
# 45 NA values for time at job
all %>% filter(TMJOB1 == 999) %>% nrow()
# Someone has 23 childern
table(all$CHILDREN)
# Someone has 25 in their household
table(all$PERS_H)
```

Replace implausible values with NA and cast non numeric variables to factors
```{r}
all <- all %>%
  mutate(TMADD = ifelse(TMADD == 999, NA, TMADD),
         TMJOB1 = ifelse(TMJOB1 == 999, NA, TMJOB1),
         CHILDREN = ifelse(CHILDREN == 23, NA, CHILDREN),
         PERS_H = ifelse(PERS_H == 25, NA, PERS_H))

# columns that should be factors
factor_cols <- c('TEL', 'STATUS', 'BUREAU', 'LOCATION', 'REGN', 'DIV', 'CARDS', 
                 'PRODUCT', 'RESID', 'NAT', 'PROF', 'CAR', 'GB', 'TITLE', 
                 'FINLOAN','EC_CARD')

# cast columns as factors
all <- all %>% mutate_at(factor_cols, funs(as.factor(.)))
```
Create dummy vars that indicate variable was missing
```{r}
missing_flags <- all %>% 
  mutate(TMADD_unk = ifelse(is.na(TMADD), 1, 0),
         TMJOB1_unk = ifelse(is.na(TMJOB1), 1, 0),
         RESID_unk = ifelse(is.na(RESID), 1, 0)) %>%
  select(TMADD_unk, TMJOB1_unk, RESID_unk)
# not creating flag for product, children and pers_h because there was very
#  little missing
```


Impute missing values
```{r}
impute_df <- all %>% select(-GB, -`_freq_`) # don't use target for imputation
target <- all %>% select(GB, `_freq_`)

set.seed(888)
# impute with missForest package. it using random forest for imputation
mf_imp <- missForest(as.data.frame(impute_df), verbose = T)

# bind the df w/ target variable and the df w/ missing values imputed
all2 <- bind_cols(target, mf_imp$ximp) 
# combine the df with imputed values and the df with flags indicating the 
# observations that were orginally missing
all2 <- bind_cols(all2, missing_flags)
```

Create features
```{r}
all2 <- all2 %>% 
  mutate(# round children and pers_h to nearest integer (imputation fractions)
         CHILDREN = round(CHILDREN),
         PERS_H = round(PERS_H),
         adult = PERS_H - CHILDREN, # of adults in household
         cash_per_pers = CASH / PERS_H,
         cash_per_adult = CASH / adult,
         income_per_pers = INCOME / PERS_H,
         income_per_adult = INCOME/ adult,
         # if cash is zero then division by zero so just impute 1.5 (avg)
         income_cash_ratio = ifelse(CASH == 0, 1.5, INCOME / CASH),
         total_loans = LOANS + NMBLOAN,
         id = row_number()) %>%
  select(GB, `_freq_`, id, everything())

# treat these vars as factors because they have 3 or less unq values
all2 <- all2 %>% 
  mutate_at(c('NMBLOAN', 'RESID', 'adult', 'TMADD_unk', 'TMJOB1_unk', 
              'RESID_unk'), funs(as.factor(.)))

# summary of the new data set
summarize_df(all2) 
```

Seprate the accepts and rejects and split the accpets to train and test sets
```{r}
# separate the data back into the rejects and accepts
accepts2 <- all2 %>% filter(!is.na(GB))
rejects2 <- all2 %>% filter(is.na(GB))

# Split into train and test sets
set.seed(888)
# train set gets random 70% of data
train <- accepts2 %>% sample_frac(size = .7) 
# test set gets the ones not in train
test <- accepts2 %>% anti_join(train, by = "id") 

# remove the id column
train <- train %>% 
  select(-id) %>%
  as.data.frame()
```

save data
```{r}
# saveRDS(accepts2, "../data/accepts_v2.rds")
# saveRDS(rejects2, "../data/rejects_v2.rds")
# saveRDS(train, "../data/train.rds")
# saveRDS(test, "../data/test.rds")


# accepts2 <- readRDS("../data/accepts2.rds")
# rejects2 <- readRDS("../data/rejects_v2.rds")
# train <- readRDS("../data/train.rds")
# test <- readRDS("../data/test.rds")
```

