---
title: "R Notebook"
output: html_notebook
---


```{r}
source("../code/helper_functions.R")
LoadPackages(c("dplyr", "smbinning", "stringr",
                "tibble", "gmodels", "vcd"))
```

```{r}
rejects2 <- readRDS("../data/rejects_v2.rds")
train <- readRDS("../data/train.rds")
test <- readRDS("../data/test.rds")
```

Create variable "good" bc smbinning expects it
```{r}
train$good = abs(as.numeric(train$GB) - 2)
train <- train %>% select(good, everything(), -GB)
test$good = abs(as.numeric(test$GB) - 2)
test <- test %>% select(good, everything(), -GB, -id)
```

Bin numeric variables
```{r}
# col names of numeric predictor variables
num_names <- names(train )[sapply(train, is.numeric)]
num_names <- num_names[3:length(num_names)]

# loop through each numeric col and use smbinning to bin them into categories
# only create bins if unique vales > 5, there are significant splits and 
# iv value is greater than 0.1
# smbinning expcts "good variable"
result_all_sig <- list() # Creating empty list to store all results #

for(i in 1:length(num_names)){
  check_res <- smbinning(df = train, y = "good", x = num_names[i])
  
  if(check_res == "Uniques values < 5") {
    print(paste0(num_names[i], " has less than 5 unq values"))
    next
  }
  else if(check_res == "No significant splits") {
    print(paste0(num_names[i], " has no sig splits"))
    next
  }
  else if(check_res$iv < 0.1) {
    print(paste0(num_names[i], " has iv less than .1"))
    next
  }
  else {
  result_all_sig[[num_names[i]]] <- check_res
  print(paste0(num_names[i], " has splits created"))
  }
}

#Able to pull all information within list by variable name #
#result_all_sig$AGE$ivtable 

```

bin factor variables
```{r}
train<-  train %>% mutate(PRODUCT = str_replace_all(PRODUCT, ",", "_"),
                          PROF = str_replace_all(PROF, ",", "_")) %>%
  mutate_at(c("PRODUCT", "PROF"), funs(as.factor(.)))

# col names of factor predictor variables
factor_names <- names(train)[sapply(train, is.factor)]


# loop through each numeric col and use smbinning to bin them into categories
# only create bins if unique vales > 5, there are significant splits and 
# iv value is greater than 0.1
# smbinning expcts "good variable"
result_all_sig_factor <- list() # Creating empty list to store all results #

for(i in 1:length(factor_names)){
  
  check_res <- smbinning.factor(df = train, y = "good", x = factor_names[i])
  
  if(check_res == "No significant splits") {
    print(paste0(factor_names[i], " has no sig splits"))
    next
  }
  else if(check_res$iv < 0.1) {
    print(paste0(factor_names[i], " has iv less than .1"))
    next
  }
  else {
    result_all_sig_factor[[factor_names[i]]] <- check_res
    print(paste0(factor_names[i], " has splits created"))
  }
}
```


```{r}
smbins <- c(result_all_sig, result_all_sig_factor)

for(i in 1:length(smbins)){
  print(smbins[[i]])
}
```



```{r}
# Generating Variables of Bins and WOE Values #
# Generating Variables of Bins and WOE Values #
for(i in 1:length(result_all_sig)) {
  train <- smbinning.gen(df = train, ivout = result_all_sig[[i]], 
                         chrname = paste(result_all_sig[[i]]$x, 
                                         "_bin", sep = ""))
}

for (j in 1:length(result_all_sig)) {
  for (i in 1:nrow(train)) {
    bin_name <- paste(result_all_sig[[j]]$x, "_bin", sep = "")
    bin <- substr(train[[bin_name]][i], 2, 2)

    woe_name <- paste(result_all_sig[[j]]$x, "_WOE", sep = "")
    
    if(bin == 0) {
      bin <- dim(result_all_sig[[j]]$ivtable)[1] - 1
      train[[woe_name]][i] <- result_all_sig[[j]]$ivtable[bin, "WoE"]
    } else {
      train[[woe_name]][i] <- result_all_sig[[j]]$ivtable[bin, "WoE"]
    }
  }
}
```

```{r}
for(i in 1:length(result_all_sig_factor)) {
  train <- smbinning.gen(df = train, ivout = result_all_sig_factor[[i]], 
                         chrname = paste(result_all_sig_factor[[i]]$x, 
                                         "_bin", sep = ""))
}

for (j in 1:length(result_all_sig_factor)) {
  for (i in 1:nrow(train)) {
    bin_name <- paste(result_all_sig_factor[[j]]$x, "_bin", sep = "")
    bin <- substr(train[[bin_name]][i], 2, 2)

    woe_name <- paste(result_all_sig_factor[[j]]$x, "_WOE", sep = "")
    
    if(bin == 0) {
      bin <- dim(result_all_sig_factor[[j]]$ivtable)[1] - 1
      train[[woe_name]][i] <- result_all_sig_factor[[j]]$ivtable[bin, "WoE"]
    } else {
      train[[woe_name]][i] <- result_all_sig_factor[[j]]$ivtable[bin, "WoE"]
    }
  }
}
```

```{r}
smbinning.gen(df = train, ivout = result_all_sig_factor[[4]], 
                         chrname = paste(result_all_sig_factor[[4]]$x, 
                                         "_bin", sep = ""))
```

```{r}
result_all_sig_factor[[3]]

# collaspe the visa variable in data prep
```

# put american express into other category